name: Tag and Release

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**'
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  tag-and-release:
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.merged == true &&
      (
        startsWith(github.event.pull_request.head.ref, 'release/') ||
        startsWith(github.event.pull_request.head.ref, 'feature/') ||
        startsWith(github.event.pull_request.head.ref, 'bugfix/')
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set Git remote with PAT
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${PAT_TOKEN}@github.com/${{ github.repository }}

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get current version
        id: get_version
        run: |
          CURRENT_TAG=$(git describe --tags --abbrev=0 || echo "0.0.0")
          echo "Current tag: $CURRENT_TAG"
          echo "current=$CURRENT_TAG" >> $GITHUB_OUTPUT

      - name: Determine new version
        id: new_version
        run: |
          CURRENT=${{ steps.get_version.outputs.current }}
          MAJOR=$(echo "$CURRENT" | cut -d. -f1)
          MINOR=$(echo "$CURRENT" | cut -d. -f2)
          PATCH=$(echo "$CURRENT" | cut -d. -f3)

          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"

          if [[ "$BRANCH_NAME" == release/* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$BRANCH_NAME" == feature/* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$BRANCH_NAME" == bugfix/* ]]; then
            PATCH=$((PATCH + 1))
          else
            echo "Unsupported branch type"
            exit 1
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "tag=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update manifest.json version
        run: |
          TAG=${{ steps.new_version.outputs.tag }}
          jq --arg version "$TAG" '.version = $version' manifest.json > tmp.json && mv tmp.json manifest.json

      - name: Read .compact-ignore and zip files with versioned name
        run: |
          if [ ! -f .compact-ignore ]; then
            echo ".compact-ignore not found, creating an empty one."
            touch .compact-ignore
          fi
          zip -r ${{ steps.new_version.outputs.tag }}.zip . -x@.compact-ignore

      - name: Commit updated manifest.json (if changed)
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add manifest.json
          if ! git diff --cached --quiet; then
            git commit -m "chore: update version to ${{ steps.new_version.outputs.tag }}"
            git push origin HEAD:${{ github.ref_name }}
          else
            echo "No changes to commit."
          fi

      - name: Create Tag
        run: |
          TAG=${{ steps.new_version.outputs.tag }}
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping tag creation."
          else
            git tag "$TAG"
            git push origin refs/tags/"$TAG"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.new_version.outputs.tag }}
          files: ${{ steps.new_version.outputs.tag }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
